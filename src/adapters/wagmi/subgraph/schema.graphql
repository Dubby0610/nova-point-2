# stores for USD calculations
type Bundle @entity {
  id: ID!
  # price of ETH in usd
  ethPriceUSD: BigDecimal!
}

type Token @entity {
  # token address
  id: ID!
  # token symbol
  symbol: String!
  # token name
  name: String!
  # token decimals
  decimals: Int!
  # derived price in ETH
  derivedETH: BigDecimal!
  # pools token is in that are white listed for USD pricing
  whitelistPools: [Pool!]!

  multipool: Multipool
}

type Pool @entity {
  # pool address
  id: ID!
  # token0
  token0: Token!
  # token1
  token1: Token!
  # fee amount
  feeTier: BigInt!
  # token0 per token1
  token0Price: BigDecimal!
  # token1 per token0
  token1Price: BigDecimal!
  # current price tracker
  sqrtPrice: BigInt!
  # in range liquidity
  liquidity: BigInt!
  # total token 0 across all ticks
  totalValueLockedToken0: BigDecimal!
  # total token 1 across all ticks
  totalValueLockedToken1: BigDecimal!
  # current tick
  tick: BigInt
}

type Multipool @entity {
  # pool address
  id: ID!
  # allow indexing by tokens
  token0: Token!
  # allow indexing by tokens
  token1: Token!

  multipoolToken: String!

  pidId: BigInt!
}

type MultipoolPosition @entity {
  # Positions created through NonfungiblePositionManager
  # {Multipool.address}-{Owner}
  id: ID!
  # owner of the NFT
  owner: String!
  # pool position is within
  multipool: Multipool!

  balance: BigInt!

  staked: BigInt!
}

type Position @entity {
  # Positions created through NonfungiblePositionManager
  # NFT token id
  id: ID!
  # owner of the NFT
  owner: String!
  # pool position is within
  pool: Pool!
  # allow indexing by tokens
  token0: Token!
  # allow indexing by tokens
  token1: Token!
  # lower tick of the position
  tickLower: Int!
  # upper tick of the position
  tickUpper: Int!
  # total position liquidity
  liquidity: BigInt!
}

type Swap @entity {
  # transaction hash
  id: ID!
  # timestamp of transaction
  timestamp: BigInt!
  # pool swap occured within
  pool: Pool!
  # allow indexing by tokens
  token0: Token!
  # allow indexing by tokens
  token1: Token!
  origin: String! # the EOA that initiated the txn
  # delta of token0 swapped
  amount0: BigDecimal!
  # delta of token1 swapped
  amount1: BigDecimal!
  # index within the txn
  logIndex: BigInt

  blockNumber: BigInt!
  price0: BigDecimal!
  price1: BigDecimal!
}